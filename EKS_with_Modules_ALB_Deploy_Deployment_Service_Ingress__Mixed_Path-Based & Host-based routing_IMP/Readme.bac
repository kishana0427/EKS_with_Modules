üëç Let‚Äôs extend your setup so you get both host-based routing and path-based routing in the same ALB ingress.

That means:

main.example.com/ ‚Üí Main App (root app)

app1.example.com/ ‚Üí App1

app2.example.com/ ‚Üí App2

Additionally: /app1 and /app2 paths can also be served under main.example.com

Here‚Äôs the full Terraform code:

############################################################
# Main App Deployment and Service
############################################################

resource "kubernetes_deployment" "nginx_main" {
  metadata {
    name   = "nginx-main"
    labels = { app = "nginx-main" }
  }
  spec {
    replicas = 1
    selector {
      match_labels = { app = "nginx-main" }
    }
    template {
      metadata { labels = { app = "nginx-main" } }
      spec {
        container {
          name  = "nginx"
          image = "nginx:latest"
          port {
            container_port = 80
          }
        }
      }
    }
  }
}

resource "kubernetes_service" "nginx_main_svc" {
  metadata {
    name = "nginx-main-svc"
  }
  spec {
    selector = { app = "nginx-main" }
    port {
      port        = 80
      target_port = 80
    }
    type = "NodePort"
  }
}

############################################################
# App1 Deployment and Service
############################################################

resource "kubernetes_deployment" "nginx_app1" {
  metadata {
    name   = "nginx-app1"
    labels = { app = "nginx-app1" }
  }
  spec {
    replicas = 1
    selector {
      match_labels = { app = "nginx-app1" }
    }
    template {
      metadata { labels = { app = "nginx-app1" } }
      spec {
        container {
          name  = "nginx"
          image = "nginx:latest"
          port {
            container_port = 80
          }
        }
      }
    }
  }
}

resource "kubernetes_service" "nginx_app1_svc" {
  metadata {
    name = "nginx-app1-svc"
  }
  spec {
    selector = { app = "nginx-app1" }
    port {
      port        = 80
      target_port = 80
    }
    type = "NodePort"
  }
}

############################################################
# App2 Deployment and Service
############################################################

resource "kubernetes_deployment" "nginx_app2" {
  metadata {
    name   = "nginx-app2"
    labels = { app = "nginx-app2" }
  }
  spec {
    replicas = 1
    selector {
      match_labels = { app = "nginx-app2" }
    }
    template {
      metadata { labels = { app = "nginx-app2" } }
      spec {
        container {
          name  = "nginx"
          image = "nginx:latest"
          port {
            container_port = 80
          }
        }
      }
    }
  }
}

resource "kubernetes_service" "nginx_app2_svc" {
  metadata {
    name = "nginx-app2-svc"
  }
  spec {
    selector = { app = "nginx-app2" }
    port {
      port        = 80
      target_port = 80
    }
    type = "NodePort"
  }
}

############################################################
# Ingress with Host + Path Routing
############################################################

resource "kubernetes_ingress_v1" "nginx_combined_ingress" {
  metadata {
    name = "nginx-combined-ingress"
    annotations = {
      "kubernetes.io/ingress.class"           = "alb"
      "alb.ingress.kubernetes.io/scheme"      = "internet-facing"
      "alb.ingress.kubernetes.io/target-type" = "ip"
      "alb.ingress.kubernetes.io/listen-ports" = "[{\"HTTP\":80}]"
    }
  }

  spec {
    # Host-based routing
    rule {
      host = "app1.example.com"
      http {
        path {
          path      = "/"
          path_type = "Prefix"
          backend {
            service {
              name = kubernetes_service.nginx_app1_svc.metadata[0].name
              port { number = 80 }
            }
          }
        }
      }
    }

    rule {
      host = "app2.example.com"
      http {
        path {
          path      = "/"
          path_type = "Prefix"
          backend {
            service {
              name = kubernetes_service.nginx_app2_svc.metadata[0].name
              port { number = 80 }
            }
          }
        }
      }
    }

    # Main host with path-based routing
    rule {
      host = "main.example.com"
      http {
        # Root app
        path {
          path      = "/"
          path_type = "Prefix"
          backend {
            service {
              name = kubernetes_service.nginx_main_svc.metadata[0].name
              port { number = 80 }
            }
          }
        }

        # App1 under /app1
        path {
          path      = "/app1"
          path_type = "Prefix"
          backend {
            service {
              name = kubernetes_service.nginx_app1_svc.metadata[0].name
              port { number = 80 }
            }
          }
        }

        # App2 under /app2
        path {
          path      = "/app2"
          path_type = "Prefix"
          backend {
            service {
              name = kubernetes_service.nginx_app2_svc.metadata[0].name
              port { number = 80 }
            }
          }
        }
      }
    }
  }
}


‚úÖ Result:

main.example.com/ ‚Üí Main app

main.example.com/app1 ‚Üí App1

main.example.com/app2 ‚Üí App2

app1.example.com/ ‚Üí App1

app2.example.com/ ‚Üí App2

